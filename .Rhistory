image_write(paste(path, "/Course Page/coursepage_files/lln.gif", sep=""))
## save static plot
lplotfun(dicedata)
## save static plot
lplotfun(dicedata)
ggsave(paste(path, "/Lecture Slides/figures/llngraph.png", sep=""), device="png", plot=last_plot(), dpi=500)
#setwd("C:/Users/ben_elsner/Lectures/econometrics-ug/Lecture Slides/figures/")
library(wesanderson)
library(readxl)
library(janitor)
ucd <- 1    # 1 if UCD computer, 0 if working on mac
if (ucd == 1) {
path <- "C:/Users/ben_elsner/econometrics-ug"
} else {
path <- "/Users/ben_elsner/econometrics-ug"
}
## Functions
diceroll <- function(n){
dice <- sample(1:6, size = n, replace = TRUE)
return(mean(dice))
}
sim <- function(rep, n){
ybar <- replicate(n=rep, expr=diceroll(n))
ybar.mean <- mean(ybar)
ybar.sd <- sd(ybar)
ybar.list <- list(ybar, ybar.mean, ybar.sd)
return(ybar.list)
}
## Dice rolling graph, unbiasedness
set.seed(123)
l <- seq(10, 10000, by=10)
meanvec <- rep(0, length(l))
n <- 10
for (i in 1:length(l)){
meanvec[i] <- sim(l[i], n)[[2]]
}
pdf(file=paste(path, "unbiased.pdf", sep=""), width=6, height=5)
plot(l,meanvec,
xlab="Number of random samples (size n=10)",
ylab="Sample mean",
#cex.lab=1.5
)
dev.off()
rm(meanvec)
## Dice rolling graph, consistency
rep <- 1000
sim10 <- sim(rep, 10)
sim100 <- sim(rep, 100)
sim1000 <- sim(rep, 1000)
xrange <- c(1.5, 5.5)
sd10 <- round(sim10[[3]], digits=3)
sd100 <- round(sim100[[3]], digits=3)
sd1000 <- round(sim1000[[3]], digits=3)
pdf(file=paste(path,"/Lecture Slides/figures/consistent.pdf",sep=""), width=10, height=6)
par(mfrow=c(1,2))
hist(sim10[[1]], breaks=40, col=wes_palette(n=1, name="GrandBudapest1"),
main="Sample size: n=10",
ylab=NULL,
xlab=expression(paste("Sample mean ", bar(Y))),
xlim=xrange,
)
text(1.3, 80, pos=4, paste("Mean=", sim100[[2]]))
text(1.3, 75, pos=4, paste("SD=", sd10))
abline(v=3.5, col="black")
hist(sim100[[1]], breaks=30, col=wes_palette(n=1, name="GrandBudapest1"),
main="Sample size: n=100",
ylab=NULL,
xlab=expression(paste("Sample mean ", bar(Y))),
xlim=xrange,
)
text(1.3, 120, pos=4, paste("Mean=", sim100[[2]]))
text(1.3, 110, pos=4, paste("SD=", sd100))
abline(v=3.5, col="black")
dev.off()
pdf(file=paste(path,"/Lecture Slides/figures/consistent2.pdf", sep=""), width=10, height=6)
par(mfrow=c(1,2))
hist(sim100[[1]], breaks=30, col=wes_palette(n=1, name="GrandBudapest1"),
main="Sample size: n=100",
ylab=NULL,
xlab=expression(paste("Sample mean ", bar(Y))),
xlim=xrange,
)
text(1.3, 120, pos=4, paste("Mean=", sim100[[2]]))
text(1.3, 110, pos=4, paste("SD=", sd100))
abline(v=3.5, col="black")
hist(sim1000[[1]], breaks=20, col=wes_palette(n=1, name="GrandBudapest1"),
main="Sample size: n=1000",
ylab=NULL,
xlab=expression(paste("Sample mean ", bar(Y))),
xlim=xrange,
)
text(1.3, 140, pos=4, paste("Mean=", sim1000[[2]]))
text(1.3, 130, pos=4, paste("SD=", sd1000))
abline(v=3.5, col="black")
dev.off()
###########################################
# This file: illustration of the CLT
set.seed(12345)
library(reshape2)
library(ggplot2)
library(ggpubr)
library(colorspace)
library(dplyr)
library(magick)
library(gganimate)
library(gifski)
library(purrr)
library(transformr)
### PARAMETERS
rm(list=ls())
#n <- 2       # sample size
nsamples <-200   # nr of samples
ucd <- 1        # 0 for mac, 1 for ucd pc
framespersec <- 2
frameheight <- 480
framewidth <- 480
if (ucd==0){
path <- "/Users/ben_elsner"
} else {
path <- "C:/Users/ben_elsner"
}
## Variance of dice roll
vardata <- data.frame(points=seq(1,6), weight=1/6)
vardata <- vardata %>% mutate(varline = (points-3.5)^2*weight)
vardice <- sum(vardata$varline)
sddice <- sqrt(vardice)
## Datasets: functions
dicesample <- function(n, nsamples){
dicedata <- data.frame(sample=rep(1:nsamples, each=n), value=sample(1:6, size=nsamples*n, replace = TRUE))
dicedata <- dicedata %>% group_by(sample) %>% mutate(roll=row_number()%%10)
dicedata$roll[dicedata$roll==0]<-10
dicedata <- dicedata %>% group_by(sample) %>% mutate(row=rep(1:ceiling(n/10), each=10, length.out=n))
return(dicedata)
}
histdataprep <- function(dicedata, n, sddice){
meandata <- dicedata %>%
group_by(sample) %>%
summarize(mean=mean(value)) %>%
mutate(zmean=(mean-3.5)/(sddice/sqrt(n)))
colnames(meandata)=c("sample", "meanvalue", "stsamplemean")
histdata <- meandata %>%
split(.$sample) %>%
accumulate(~ bind_rows(.x, .y)) %>%
bind_rows(.id = "frame") %>%
mutate(frame = as.integer(frame))
histdata <- histdata %>% group_by(frame) %>%
mutate(lastmean=meanvalue[sample==max(sample)])
return(histdata)
}
## Graphs: functions
dicegraphfun <- function(dicedata, n){
dicegraph <- ggplot(dicedata, aes(x = roll, y=-row, group=sample)) +
ggtitle(paste("Sample size: ", n, sep=""))+
geom_tile(aes(fill=value), show.legend=FALSE) +
coord_equal()+
scale_fill_gradient(low="grey90", high= "darkorange2") +
theme_bw() + theme(plot.margin=margin(-5,0,-5,0,"cm"),axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=30, face = "bold")) +
geom_text(size=10, aes(label=value), fontface="bold")+
transition_states(sample, transition_length = 0.1, state_length = 0.5)+
ease_aes('cubic-in-out')
return(dicegraph)
}
histfun <- function(histdata, sddice, n, xrange){
histogram <- ggplot(histdata, aes(x=meanvalue, group=frame)) +
geom_histogram(aes(y=..density..), binwidth=0.1, fill="darkorange2")+
geom_vline(aes(xintercept = histdata$lastmean), size=3, colour="darkgrey", linetype="dotted")+
geom_vline(aes(xintercept = 3.5, yintercept=0), size=2, colour="darkgrey")+
stat_function(fun = dnorm, args = list(mean = 3.5, sd = sddice/sqrt(n)), size=2)+
scale_x_continuous(breaks = seq(1, 6, 1), lim = xrange)+
theme(axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(face="bold", size=25),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.margin=margin(-30, 0, 0, 0,"cm"))+
geom_hline(yintercept = 0, size=1)+
transition_states(frame, transition_length = 0.1, state_length = 0.5)+
ease_aes('cubic-in-out')
return(histogram)
}
## Produce Gifs
producegif <- function(n, xrange){
dicedata <- dicesample(n, nsamples)
histdata <- histdataprep(dicedata, n, sddice)
dicegraph <- dicegraphfun(dicedata, n)
dicegif <- animate(dicegraph, fps=framespersec, width = frameheight, height = framewidth, renderer=gifski_renderer(paste(path, "/econometrics-ug/GIFs/diceclt.gif", sep="")))
histogram <- histfun(histdata, sddice, n, xrange)
histgif <- animate(histogram, fps=framespersec, width = frameheight, height = framewidth, renderer=gifski_renderer(paste(path, "/econometrics-ug/GIFs/histclt.gif", sep="")))
a_mgif <- image_read(paste(path, "/econometrics-ug/GIFs/diceclt.gif", sep=""))
c_mgif <- image_read(paste(path, "/econometrics-ug/GIFs/histclt.gif", sep=""))
nimages <- min(dim(image_info(a_mgif))[1], dim(image_info(c_mgif))[1])
i=1
new_gif <- image_append(c(a_mgif[i], c_mgif[i]), stack=TRUE)
for(i in 2:nimages){
combined <- image_append(c(a_mgif[i], c_mgif[i]), stack=TRUE)
new_gif <- c(new_gif, combined)
}
anim_save(paste(path, "/econometrics-ug/GIFs/diceclt", n, ".gif", sep=""), new_gif)
anim_save(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/diceclt", n, ".gif", sep=""), new_gif)
}
## Graph 1: n=2
n=2
xrange <- c(1,6)
producegif(n, xrange)
## Graph 2: n=10
n=10
xrange <- c(2,5)
producegif(n, xrange)
## Graph 3: n=20
n=20
xrange <- c(2.5, 4.5)
producegif(n, xrange)
## Graph 4: n=50
n=50
xrange <- c(3, 4)
producegif(n, xrange)
##### PART II: N(0,1) GRAPHS ##############
#-- generate data##
nsamples <- 1000
samplesize <- list(2, 3, 4, 5, 10, 15, 20, 30, 40, 50, 100, 150, 200)
dicedatast <- lapply(samplesize, dicesample, nsamples=nsamples)
histdata <- vector("list", length(samplesize))
for (i in 1:length(samplesize)){
data <- as.data.frame(dicedatast[i])
histdata[[i]] <- data %>%
group_by(sample) %>%
summarize(mean=mean(value)) %>%
mutate(zmean=(mean-3.5)/(sddice/sqrt(samplesize[[i]][1])))
}
#--- Histograms ----
xrange <- c(-3.5, 3.5)
histograms <- vector("list", length(samplesize))
for (i in 1:length(samplesize)){
data <- as.data.frame(histdata[i])
n <- samplesize[i]
histogram <- ggplot(data, aes(x=zmean)) +
geom_histogram(aes(y=..density..), fill="darkorange2")+
ylim(c(0, 1)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), size=1.5)+
scale_x_continuous(breaks = seq(-3, 3, 1), lim = xrange)+
ggtitle(paste("1000 Samples, Size", n, sep=" "))+
theme(axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(face="bold", size=25),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.margin=margin(0, 0, 0, 0,"cm"))+
geom_hline(yintercept = 0, size=1)
ggsave(paste(path, "/cltgraphs/cltfile", i, ".png", sep=""), device="png", plot=last_plot(), dpi=500)
}
list.files(paste(path, "/cltgraphs", sep=""), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=1) %>% # animates, can opt for number of loops
image_write(paste(path, "/econometrics-ug/GIFs/clt.gif", sep=""))
#image_write(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/clt.gif", sep=""))
list.files(paste(path, "/cltgraphs", sep=""), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=1) %>% # animates, can opt for number of loops
#image_write(paste(path, "/econometrics-ug/GIFs/clt.gif", sep=""))
image_write(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/clt.gif", sep=""))
list.files(paste(path, "/cltgraphs", sep=""), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=1) %>% # animates, can opt for number of loops
image_write(paste(path, "/econometrics-ug/GIFs/clt.gif", sep=""))
#image_write(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/clt.gif", sep=""))
#-- generate data##
nsamples <- 1000
samplesize <- list(2, 3, 4, 5, 10, 15, 20, 30, 40, 50, 100, 150, 200)
dicedatast <- lapply(samplesize, dicesample, nsamples=nsamples)
histdata <- vector("list", length(samplesize))
for (i in 1:length(samplesize)){
data <- as.data.frame(dicedatast[i])
histdata[[i]] <- data %>%
group_by(sample) %>%
summarize(mean=mean(value)) %>%
mutate(zmean=(mean-3.5)/(sddice/sqrt(samplesize[[i]][1])))
}
#--- Histograms ----
xrange <- c(-3.5, 3.5)
histograms <- vector("list", length(samplesize))
for (i in 1:length(samplesize)){
data <- as.data.frame(histdata[i])
n <- samplesize[i]
histogram <- ggplot(data, aes(x=zmean)) +
geom_histogram(aes(y=..density..), binwidth=0.1, fill="darkorange2")+
ylim(c(0, 1)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), size=1.5)+
scale_x_continuous(breaks = seq(-3, 3, 1), lim = xrange)+
ggtitle(paste("1000 Samples, Size", n, sep=" "))+
theme(axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(face="bold", size=25),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.margin=margin(0, 0, 0, 0,"cm"))+
geom_hline(yintercept = 0, size=1)
ggsave(paste(path, "/cltgraphs/cltfile", i, ".png", sep=""), device="png", plot=last_plot(), dpi=500)
}
list.files(paste(path, "/cltgraphs", sep=""), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=1) %>% # animates, can opt for number of loops
image_write(paste(path, "/econometrics-ug/GIFs/clt.gif", sep=""))
#image_write(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/clt.gif", sep=""))
###########################################
# This file: illustration of the CLT
set.seed(12345)
library(reshape2)
library(ggplot2)
library(ggpubr)
library(colorspace)
library(dplyr)
library(magick)
library(gganimate)
library(gifski)
library(purrr)
library(transformr)
### PARAMETERS
rm(list=ls())
#n <- 2       # sample size
nsamples <-200   # nr of samples
ucd <- 1        # 0 for mac, 1 for ucd pc
framespersec <- 2
frameheight <- 480
framewidth <- 480
if (ucd==0){
path <- "/Users/ben_elsner"
} else {
path <- "C:/Users/ben_elsner"
}
## Variance of dice roll
vardata <- data.frame(points=seq(1,6), weight=1/6)
vardata <- vardata %>% mutate(varline = (points-3.5)^2*weight)
vardice <- sum(vardata$varline)
sddice <- sqrt(vardice)
## Datasets: functions
dicesample <- function(n, nsamples){
dicedata <- data.frame(sample=rep(1:nsamples, each=n), value=sample(1:6, size=nsamples*n, replace = TRUE))
dicedata <- dicedata %>% group_by(sample) %>% mutate(roll=row_number()%%10)
dicedata$roll[dicedata$roll==0]<-10
dicedata <- dicedata %>% group_by(sample) %>% mutate(row=rep(1:ceiling(n/10), each=10, length.out=n))
return(dicedata)
}
histdataprep <- function(dicedata, n, sddice){
meandata <- dicedata %>%
group_by(sample) %>%
summarize(mean=mean(value)) %>%
mutate(zmean=(mean-3.5)/(sddice/sqrt(n)))
colnames(meandata)=c("sample", "meanvalue", "stsamplemean")
histdata <- meandata %>%
split(.$sample) %>%
accumulate(~ bind_rows(.x, .y)) %>%
bind_rows(.id = "frame") %>%
mutate(frame = as.integer(frame))
histdata <- histdata %>% group_by(frame) %>%
mutate(lastmean=meanvalue[sample==max(sample)])
return(histdata)
}
## Graphs: functions
dicegraphfun <- function(dicedata, n){
dicegraph <- ggplot(dicedata, aes(x = roll, y=-row, group=sample)) +
ggtitle(paste("Sample size: ", n, sep=""))+
geom_tile(aes(fill=value), show.legend=FALSE) +
coord_equal()+
scale_fill_gradient(low="grey90", high= "darkorange2") +
theme_bw() + theme(plot.margin=margin(-5,0,-5,0,"cm"),axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=30, face = "bold")) +
geom_text(size=10, aes(label=value), fontface="bold")+
transition_states(sample, transition_length = 0.1, state_length = 0.5)+
ease_aes('cubic-in-out')
return(dicegraph)
}
histfun <- function(histdata, sddice, n, xrange){
histogram <- ggplot(histdata, aes(x=meanvalue, group=frame)) +
geom_histogram(aes(y=..density..), binwidth=0.1, fill="darkorange2")+
geom_vline(aes(xintercept = histdata$lastmean), size=3, colour="darkgrey", linetype="dotted")+
geom_vline(aes(xintercept = 3.5, yintercept=0), size=2, colour="darkgrey")+
stat_function(fun = dnorm, args = list(mean = 3.5, sd = sddice/sqrt(n)), size=2)+
scale_x_continuous(breaks = seq(1, 6, 1), lim = xrange)+
theme(axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(face="bold", size=25),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.margin=margin(-30, 0, 0, 0,"cm"))+
geom_hline(yintercept = 0, size=1)+
transition_states(frame, transition_length = 0.1, state_length = 0.5)+
ease_aes('cubic-in-out')
return(histogram)
}
## Produce Gifs
producegif <- function(n, xrange){
dicedata <- dicesample(n, nsamples)
histdata <- histdataprep(dicedata, n, sddice)
dicegraph <- dicegraphfun(dicedata, n)
dicegif <- animate(dicegraph, fps=framespersec, width = frameheight, height = framewidth, renderer=gifski_renderer(paste(path, "/econometrics-ug/GIFs/diceclt.gif", sep="")))
histogram <- histfun(histdata, sddice, n, xrange)
histgif <- animate(histogram, fps=framespersec, width = frameheight, height = framewidth, renderer=gifski_renderer(paste(path, "/econometrics-ug/GIFs/histclt.gif", sep="")))
a_mgif <- image_read(paste(path, "/econometrics-ug/GIFs/diceclt.gif", sep=""))
c_mgif <- image_read(paste(path, "/econometrics-ug/GIFs/histclt.gif", sep=""))
nimages <- min(dim(image_info(a_mgif))[1], dim(image_info(c_mgif))[1])
i=1
new_gif <- image_append(c(a_mgif[i], c_mgif[i]), stack=TRUE)
for(i in 2:nimages){
combined <- image_append(c(a_mgif[i], c_mgif[i]), stack=TRUE)
new_gif <- c(new_gif, combined)
}
anim_save(paste(path, "/econometrics-ug/GIFs/diceclt", n, ".gif", sep=""), new_gif)
anim_save(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/diceclt", n, ".gif", sep=""), new_gif)
}
## Graph 1: n=2
n=2
xrange <- c(1,6)
producegif(n, xrange)
## Graph 2: n=10
n=10
xrange <- c(2,5)
producegif(n, xrange)
## Graph 3: n=20
n=20
xrange <- c(2.5, 4.5)
producegif(n, xrange)
## Graph 4: n=50
n=50
xrange <- c(3, 4)
producegif(n, xrange)
##### PART II: N(0,1) GRAPHS ##############
#-- generate data##
nsamples <- 1000
samplesize <- list(2, 3, 4, 5, 10, 15, 20, 30, 40, 50, 100, 150, 200)
dicedatast <- lapply(samplesize, dicesample, nsamples=nsamples)
histdata <- vector("list", length(samplesize))
for (i in 1:length(samplesize)){
data <- as.data.frame(dicedatast[i])
histdata[[i]] <- data %>%
group_by(sample) %>%
summarize(mean=mean(value)) %>%
mutate(zmean=(mean-3.5)/(sddice/sqrt(samplesize[[i]][1])))
}
#--- Histograms ----
xrange <- c(-3.5, 3.5)
histograms <- vector("list", length(samplesize))
for (i in 1:length(samplesize)){
data <- as.data.frame(histdata[i])
n <- samplesize[i]
histogram <- ggplot(data, aes(x=zmean)) +
geom_histogram(aes(y=..density..), binwidth=0.1, fill="darkorange2")+
ylim(c(0, 1)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), size=1.5)+
scale_x_continuous(breaks = seq(-3, 3, 1), lim = xrange)+
ggtitle(paste("1000 Samples, Size", n, sep=" "))+
theme(axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(face="bold", size=25),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.margin=margin(0, 0, 0, 0,"cm"))+
geom_hline(yintercept = 0, size=1)
ggsave(paste(path, "/cltgraphs/cltfile", i, ".png", sep=""), device="png", plot=last_plot(), dpi=500)
}
list.files(paste(path, "/cltgraphs", sep=""), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=1) %>% # animates, can opt for number of loops
#image_write(paste(path, "/econometrics-ug/GIFs/clt.gif", sep=""))
image_write(paste(path, "/Lectures/intuitivemetrics/docs/_bookdown_files/clt.gif", sep=""))
setwd("C:/Users/ben_elsner/Lectures/intuitivemetrics")
bookdown::render_book("index.Rmd", output_dir="docs")
bookdown::render_book("index.Rmd", output_dir="docs")
bookdown::render_book("index.Rmd", output_dir="docs")
bookdown::render_book("index.Rmd", output_dir="docs")
bookdown::render_book("index.Rmd", output_dir="docs")
